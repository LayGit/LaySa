{
  "name": "howdo",
  "version": "1.1.2",
  "description": "如何做，一个简易的异步流程控制",
  "main": "howdo.js",
  "keywords": [
    "async",
    "workflow",
    "nodejs",
    "browser",
    "howdo"
  ],
  "author": {
    "name": "cloudcome"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cloudcome/nodejs-howdo"
  },
  "license": "MIT",
  "readmeFilename": "readme.md",
  "readme": "# howdo[![NPM version](https://img.shields.io/npm/v/howdo.svg?style=flat)](https://npmjs.org/package/howdo)\r\n如何做，一个简易的异步流程控制\r\n\r\n# FEATURES\r\n* nodejs（all）、browser（IE6/7/8/9/10/11、chrome、firefox）通用\r\n* 注重约定\r\n* 同步、异步任务都支持\r\n* 支持顺序串行任务\r\n* 支持顺序并行任务\r\n* 自动实例化\r\n* 链式操作\r\n\r\n\r\n\r\n# INSTALL\r\n\r\n## nodejs\r\n```cmd\r\nnpm i howdo -S\r\n```\r\n\r\n```js\r\nvar howdow = require('howdo');\r\n```\r\n\r\n## browser\r\n### Dir\r\n```html\r\n<script src=\"/path/to/howdo.js\"></script>\r\n<script>\r\n// howdo挂载在window对象上\r\n// do sth...\r\n</script>\r\n```\r\n\r\n### AMD\r\n```\r\ndefined(['howdo'], function(howdo){\r\n    // do sth...\r\n});\r\n```\r\n\r\n### CJS\r\n```\r\nvar howdo = require('howdo');\r\n// do sth...\r\n```\r\n\r\n\r\n# API\r\n\r\n## `#task` 分配单个任务，链式\r\n```js\r\n// 分配顺序串行任务\r\nhowdo\r\n    // 分配单次任务 1\r\n    .task(function (next) {\r\n        // 第一个参数必须是Error对象的实例，如果没有错误，传null\r\n        // 可以传多个结果给下一个任务接收\r\n        next(null, 1, 2, 3);\r\n    })\r\n    // 分配单次任务 2\r\n    .task(function (next, data1, data2, data3) {\r\n        // data1 = 1\r\n        // data2 = 2\r\n        // data3 = 3\r\n        next(null, data1 + data2 + data3);\r\n    })\r\n    .follow(function (err, data) {\r\n        // err = null\r\n        // data = 6\r\n    });\r\n\r\n\r\n// 分配顺序并行任务\r\nhowdo\r\n    // 分配单次任务 1\r\n    .task(function (done) {\r\n        // 第一个参数必须是Error对象的实例，如果没有错误，传null\r\n        // 可以传多个结果给结果接收\r\n        done(null, 1, 2, 3);\r\n    })\r\n    // 分配单次任务 2\r\n    .task(function (done) {\r\n        done(null, 4);\r\n    })\r\n    .follow(function (err, data1, data2, data3, data4) {\r\n        // err = null\r\n        // data1 = 1\r\n        // data2 = 2\r\n        // data3 = 3\r\n        // data4 = 4\r\n    });\r\n```\r\n\r\n## `#each` 循环分配任务，链式\r\n```js\r\n// task是用来分配单个次序任务，而如果是批量次序任务的话，就需要用each来操作了\r\n\r\nvar list = [1, 2, 3, 4];\r\n\r\n// 批量分配顺序串行任务\r\nhowdo\r\n    .each(list, function (key, val, next, data) {\r\n        // 第1次： data = undefined\r\n        // 第2次： data = 1\r\n        // 第3次： data = 2\r\n        // 第4次： data = 3\r\n        next(null, val);\r\n    })\r\n    .follow(function (err, data) {\r\n        // err = null\r\n        // data = 4\r\n    });\r\n\r\n\r\n// 批量分配顺序并行任务\r\nhowdo\r\n    .each(list, function (key, val, done) {\r\n        done(null, val);\r\n    })\r\n    .together(function (err, data1, data2, data3, data4) {\r\n        // err = null\r\n        // data1 = 1\r\n        // data2 = 2\r\n        // data3 = 3\r\n        // data4 = 4\r\n    });\r\n```\r\n\r\n\r\n## `#follow` 顺序串行任务，链式结束\r\n\r\n`follow`用来收集任务结果，如其字面意思，表示多个任务是顺序串行执行的。\r\n\r\n\r\n## `#together` 顺序并行任务，链式结束\r\n\r\n`together`也是用来收集任务结果，如其字面意思，表示多个任务是顺序并行执行的。\r\n\r\n\r\n\r\n# Howdo VS AJAX\r\n```\r\n// 此处以jquery为例\r\n// 首先来改装下 $.ajax\r\nfunction request(options, callback) {\r\n    $.ajax(options).done(function (json) {\r\n        if (json.error) {\r\n            return callback(new Error(json.error));\r\n        }\r\n\r\n        callback(null, json.data);\r\n    }).fail(function (jqXHR) {\r\n        callback(new Error(jqXHR.responseText));\r\n    });\r\n}\r\n\r\n\r\nhowdo.task(function (next) {\r\n    request({\r\n        url: '1'\r\n    }, next);\r\n}).task(function (next) {\r\n    request({\r\n        url: '2'\r\n    }, next);\r\n}).follow(function (err, data) {\r\n    // do sth...\r\n});\r\n\r\n\r\nhowdo.task(function (done) {\r\n    request({\r\n        url: '1'\r\n    }, done);\r\n}).task(function (done) {\r\n    request({\r\n        url: '2'\r\n    }, done);\r\n}).follow(function (err, data1, data2) {\r\n    // do sth...\r\n});\r\n```\r\n\r\n\r\n# MORE\r\n* [《nodejs学习17：howdo如何做，一个简易的异步流程控制》](http://qianduanblog.com/post/nodejs-learning-17-howdo-a-simple-workflow-solutions.html)\r\n* [《nodejs学习18：howdo——如何做，一个简易的流程控制，v1.0.0版本发布》](http://qianduanblog.com/post/nodejs-learning-18-howdo-how-to-do-a-simple-flow-control-v1-0-0-release.html)\r\n\r\n\r\n# VERSION\r\n## v 1.1.1\r\n* 修复空列表的each问题\r\n\r\n## v 1.1.0\r\n* 兼容到IE6、chrome、firefox\r\n* 兼容到nodejs\r\n\r\n## v 0.0.1\r\n* 初始版本\r\n",
  "bugs": {
    "url": "https://github.com/cloudcome/nodejs-howdo/issues"
  },
  "homepage": "https://github.com/cloudcome/nodejs-howdo",
  "_id": "howdo@1.1.2",
  "dist": {
    "shasum": "a14b07d1b69faf3ed8043f5141f29a097cf6c3e5"
  },
  "_from": "howdo@",
  "_resolved": "https://registry.npmjs.org/howdo/-/howdo-1.1.2.tgz"
}
